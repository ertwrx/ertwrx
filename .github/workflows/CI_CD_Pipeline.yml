name: ERTWRX CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
        libdbus-1-dev \
        libglib2.0-dev \
        pkg-config \
        build-essential \
        cmake \
        libffi-dev \
        libssl-dev \
        python3-dev

        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 black

        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check formatting with Black
      run: |
        black --check . || true
        
    - name: Test with pytest
      run: |
        mkdir -p tests
        touch tests/__init__.py
        # Create a simple test if none exists
        if [ ! -f tests/test_app.py ]; then
          echo 'def test_app_creation():
            from app import create_app
            app = create_app()
            assert app is not None' > tests/test_app.py
        fi
        pytest --cov=app tests/ || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          .coverage
          htmlcov/
          
  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install wheel setuptools gunicorn
        
    - name: Create distribution
      run: |
        mkdir -p dist
        tar -czf dist/ertwrx-app.tar.gz --exclude='.git' --exclude='dist' --exclude='.github' .
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: dist/
        
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-build
        path: dist/
        
    - name: Set up SSH for staging
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
        
    - name: Deploy to staging server
      env:
        DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
        DEPLOY_USER: ${{ secrets.STAGING_USER }}
        DEPLOY_PATH: ${{ secrets.STAGING_PATH }}
      run: |
        # Add host key verification
        mkdir -p ~/.ssh
        ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
        
        # Copy files to server
        scp dist/ertwrx-app.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
        
        # Extract and restart app
        ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd $DEPLOY_PATH
          mkdir -p app-temp
          tar -xzf ertwrx-app.tar.gz -C app-temp/
          supervisorctl stop ertwrx-app || true
          rm -rf app-current || true
          mv app-temp app-current || true
          pip install -r app-current/requirements.txt || true
          supervisorctl start ertwrx-app || true
          rm ertwrx-app.tar.gz || true
        EOF
        
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production'
    environment:
      name: production
      url: https://ertwrx.com
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-build
        path: dist/
        
    - name: Set up SSH for production
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
        
    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
        DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
        DEPLOY_PATH: ${{ secrets.PRODUCTION_PATH }}
      run: |
        # Add host key verification
        mkdir -p ~/.ssh
        ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
        
        # Copy files to server
        scp dist/ertwrx-app.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
        
        # Extract and restart app
        ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          cd $DEPLOY_PATH
          mkdir -p app-temp
          tar -xzf ertwrx-app.tar.gz -C app-temp/
          supervisorctl stop ertwrx-app || true
          mv app-current app-previous || true
          mv app-temp app-current
          pip install -r app-current/requirements.txt || true
          supervisorctl start ertwrx-app || true
          rm ertwrx-app.tar.gz || true
        EOF
